# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Category {
  createdAt: LuxonDateTime!
  description: String!
  id: ID!
  name: String!
  recipes: [Recipe!]
  thumbnail: String
  updatedAt: LuxonDateTime!
}

type Collection {
  createdAt: LuxonDateTime!
  id: ID!
  name: String!
  recipes: [Recipe!]
  updatedAt: LuxonDateTime!
  user: User!
  userId: Int!
}

type Ingredient {
  amount: Int!
  createdAt: LuxonDateTime!
  id: ID!
  name: String!
  recipe: [Recipe!]
  unit: String!
  updatedAt: LuxonDateTime!
}

"""Luxon Date scalar type"""
scalar LuxonDateTime

type Mutation {
  addCategory(newCategoryData: NewCategoryInput!): Category!
  addIngredient(newIngredientData: NewIngredientInput!): Ingredient!
  addRecipe(newRecipeData: NewRecipeInput!): Recipe!
  addUnit(newUnitData: NewUnitInput!): Unit!
  addUser(newUserData: NewUserInput!): User!
  deleteCategory(id: Float!): Boolean!
  deleteIngredient(id: Float!): Boolean!
  deleteRecipe(id: Float!): Boolean!
  deleteUnit(id: Float!): Boolean!
  login(email: String!, password: String!): UserToken!
  logout: Boolean!
  register(newUserData: NewUserInput!): User!
  removeUser(id: Float!): Boolean!
  updateCategory(id: Float!, updateCategoryData: UpdateCategoryInput!): Category!
  updateIngredient(id: Float!, updateIngredientData: UpdateIngredientInput!): Ingredient!
  updatePassword(id: Int!, password: String!): User!
  updateRecipe(id: Float!, updateRecipeData: UpdateRecipeInput!): Recipe!
  updateUnit(id: Float!, updateUnitData: UpdateUnitInput!): Unit!
  updateUser(id: Float!, updateUserData: UpdateUserInput!): User!
}

input NewCategoryInput {
  description: String!
  name: String!
  thumbnail: String
}

input NewIngredientInput {
  name: String!
}

input NewRecipeInput {
  calories: Int
  categories: [Int!]!
  cookingTimeInMinutes: Int!
  difficulty: String!
  imageUrl: String
  ingredients: [RecipeIngredient!]!
  instructions: String!
  name: String!
  numberOfPeople: Int!
  restingTimeInMinutes: Int
  shortDescription: String
  userId: Int
}

input NewUnitInput {
  name: String!
}

input NewUserInput {
  email: String!
  fullname: String
  password: String!
  passwordConfirmation: String!
  role: String!
  username: String!
}

type PaginatedRecipes {
  data: [Recipe!]!
  meta: PaginationMeta!
}

type PaginationMeta {
  currentPage: Int!
  firstPage: Int!
  firstPageUrl: String!
  lastPage: Int!
  lastPageUrl: String
  nextPageUrl: String
  perPage: Int!
  previousPageUrl: String
  total: Int!
}

type Query {
  categories: [Category!]!
  category(id: Float!): Category!
  ingredient(id: Float!): Ingredient!
  ingredients: [Ingredient!]!
  paginatedRecipes(page: Float!): PaginatedRecipes!
  recipe(id: Float!): Recipe!
  recipeByName(name: String!): Recipe!
  recipes: [Recipe!]!
  unit(id: Float!): Unit!
  units: [Unit!]!
  user(id: Float!): User!
  users: [User!]!
}

type Recipe {
  calories: Int
  categories: [Category!]!
  collections: [Collection!]
  cookingTimeInMinutes: Int!
  createdAt: LuxonDateTime!
  difficulty: String!
  id: ID!
  imageUrl: String
  ingredients: [Ingredient!]!
  instructions: String!
  name: String!
  numberOfPeople: Int!
  restingTimeInMinutes: Int
  shortDescription: String
  updatedAt: LuxonDateTime!
  user: User!
  userId: Int!
}

input RecipeIngredient {
  amount: Int!
  id: ID!
  name: String!
  unit: String!
}

type Unit {
  createdAt: LuxonDateTime!
  id: ID!
  name: String!
  updatedAt: LuxonDateTime!
}

input UpdateCategoryInput {
  description: String
  name: String
  thumbnail: String
}

input UpdateIngredientInput {
  name: String!
}

input UpdateRecipeInput {
  calories: Int
  categories: [Int!]
  cookingTimeInMinutes: Int
  difficulty: String
  imageUrl: String
  ingredients: [RecipeIngredient!]
  instructions: String
  name: String
  numberOfPeople: Int
  restingTimeInMinutes: Int
  shortDescription: String
  userId: Int
}

input UpdateUnitInput {
  name: String!
}

input UpdateUserInput {
  email: String
  fullname: String
  role: String
  username: String
}

type User {
  collections: [Collection!]!
  createdAt: LuxonDateTime!
  email: String!
  fullName: String
  id: ID!
  password: String!
  recipes: [Recipe!]!
  role: String!
  updatedAt: LuxonDateTime!
  username: String!
}

type UserToken {
  abilities: [String!]
  expiresAt: String
  lastUsedAt: String
  name: String
  type: String!
  value: String!
}